# PostgreSQL WAL Archiving Configuration for PITR
# =============================================================================
# This file contains additional PostgreSQL configuration for enabling
# Write-Ahead Log (WAL) archiving to support Point-in-Time Recovery (PITR).
#
# To enable PITR:
# 1. Create WAL archive directory: mkdir -p /backups/wal_archive
# 2. Mount this config file in docker-compose.yml
# 3. Restart PostgreSQL to apply changes
#
# See: https://www.postgresql.org/docs/current/continuous-archiving.html
# =============================================================================

# Enable WAL archiving
# This is required for PITR and streaming replication
wal_level = replica

# Enable archive mode
# Completed WAL segments will be sent to archive_command
archive_mode = on

# Archive command
# This command is executed for each completed WAL segment
# %p = path of file to archive (within pg_wal)
# %f = file name only
#
# The command below compresses WAL segments and stores them in the archive directory.
# It only copies the file if it doesn't already exist (test -f prevents overwrites).
archive_command = 'test ! -f /backups/wal_archive/%f.gz && gzip < %p > /backups/wal_archive/%f.gz'

# Archive timeout
# Force a WAL segment switch after this many seconds even if the segment is not full
# This ensures that backups don't wait too long for WAL archives
# 300 seconds = 5 minutes (good balance for RPO < 5 minutes)
archive_timeout = 300

# WAL configuration for better performance and reliability
# Maximum size to let the WAL grow between automatic checkpoints
max_wal_size = 4GB

# Minimum size to shrink the WAL to
min_wal_size = 1GB

# Checkpoint completion target (fraction of checkpoint interval)
# Higher values = smoother I/O, lower values = faster recovery
checkpoint_completion_target = 0.9

# Number of WAL segments to retain for replication
# This provides a buffer if archive_command is slow or fails temporarily
wal_keep_size = 512MB

# Logging for archive operations (useful for troubleshooting)
# Log archive command execution
log_archive_commands = on

# Additional recommended settings for production
# Sync WAL writes to disk immediately for data safety
synchronous_commit = on

# Maximum number of concurrent connections (adjust based on your needs)
max_connections = 100

# Shared buffers (adjust based on available RAM, typically 25% of RAM)
# For 4GB RAM: 1GB, for 8GB RAM: 2GB, for 16GB RAM: 4GB
shared_buffers = 1GB

# Effective cache size (hint for query planner, typically 50-75% of RAM)
effective_cache_size = 3GB

# Work memory for sorts and hash tables (per operation)
work_mem = 16MB

# Maintenance work memory (for VACUUM, CREATE INDEX, etc.)
maintenance_work_mem = 256MB

# Enable auto-vacuum for routine maintenance
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 1min

# Statistics collection for query optimization
track_activities = on
track_counts = on
track_io_timing = on

# Log slow queries for performance monitoring
log_min_duration_statement = 1000  # Log queries slower than 1 second

# Log connections and disconnections
log_connections = off
log_disconnections = off

# Enable checksums for data page corruption detection
# NOTE: This must be enabled when initializing the database cluster
# Enable with: initdb --data-checksums or pg_checksums --enable (PostgreSQL 12+)
# Check status with: SHOW data_checksums;

# =============================================================================
# To apply this configuration:
#
# 1. Docker Compose method (recommended):
#    Add to docker-compose.yml under the 'db' service:
#
#    volumes:
#      - ./config/postgres/wal_archiving.conf:/etc/postgresql/postgresql.conf.d/wal_archiving.conf:ro
#      - ./backups/wal_archive:/backups/wal_archive
#
#    And add command to include config:
#    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c 'include_dir=/etc/postgresql/postgresql.conf.d'
#
# 2. Manual method:
#    docker compose exec db psql -U postgres -c "ALTER SYSTEM SET wal_level = replica;"
#    docker compose exec db psql -U postgres -c "ALTER SYSTEM SET archive_mode = on;"
#    docker compose exec db psql -U postgres -c "ALTER SYSTEM SET archive_command = 'test ! -f /backups/wal_archive/%f.gz && gzip < %p > /backups/wal_archive/%f.gz';"
#    docker compose restart db
#
# 3. Verify configuration:
#    docker compose exec db psql -U postgres -c "SHOW wal_level;"
#    docker compose exec db psql -U postgres -c "SHOW archive_mode;"
#    docker compose exec db psql -U postgres -c "SHOW archive_command;"
#
# 4. Monitor archiving:
#    docker compose exec db psql -U postgres -c "SELECT * FROM pg_stat_archiver;"
#    ls -lh /backups/wal_archive/
# =============================================================================
