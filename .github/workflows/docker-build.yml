name: Docker Build & Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      rocm_version:
        description: 'ROCm version for build (e.g., 6.0, 6.1, 6.2)'
        required: false
        default: '6.0'
        type: string
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: onnwee/transcript-create

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag as 'latest' for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with version for release tags (v1.2.3 -> 1.2.3)
            type=semver,pattern={{version}}
            # Tag with major.minor for release tags (v1.2.3 -> 1.2)
            type=semver,pattern={{major}}.{{minor}}
            # Tag with major for release tags (v1.2.3 -> 1)
            type=semver,pattern={{major}}
            # Tag with sha for all commits (sha-abc123)
            type=sha,prefix=sha-,format=short
          labels: |
            org.opencontainers.image.title=Transcript Create
            org.opencontainers.image.description=Create searchable, exportable transcripts from YouTube videos or channels
            org.opencontainers.image.vendor=Subculture Collective
            org.opencontainers.image.licenses=Apache-2.0

      - name: Determine ROCm version and build args
        id: rocm
        run: |
          # Use workflow input if provided, otherwise default to 6.0
          ROCM_VERSION="${{ inputs.rocm_version || '6.0' }}"
          echo "version=${ROCM_VERSION}" >> $GITHUB_OUTPUT
          echo "wheel_index=https://download.pytorch.org/whl/rocm${ROCM_VERSION}" >> $GITHUB_OUTPUT

          # Add ROCm variant tag if not on main branch or if manually specified
          if [[ "${{ github.ref }}" != "refs/heads/main" ]] || [[ -n "${{ inputs.rocm_version }}" ]]; then
            echo "rocm_tag=rocm${ROCM_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ (github.event_name != 'workflow_dispatch') || inputs.push_image }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.rocm.outputs.rocm_tag != '' && format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, steps.rocm.outputs.rocm_tag) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ROCM_WHEEL_INDEX=${{ steps.rocm.outputs.wheel_index }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        if: ${{ (github.event_name != 'workflow_dispatch') || inputs.push_image }}
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: Run Trivy vulnerability scanner
        if: ${{ (github.event_name != 'workflow_dispatch') || inputs.push_image }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-container'

      - name: Output image details
        run: |
          echo "### Docker Image Published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  /' >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ steps.rocm.outputs.rocm_tag }}" ]]; then
            echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.rocm.outputs.rocm_tag }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build-time-check:
    name: Verify Build Time
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
      - name: Check build duration
        run: |
          echo "### Build Time Analysis :clock3:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build job completed. Review the build-and-push job duration above." >> $GITHUB_STEP_SUMMARY
          echo "**Target:** < 5 minutes with caching" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** < 15 minutes for first build" >> $GITHUB_STEP_SUMMARY
