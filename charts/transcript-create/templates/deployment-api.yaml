{{- if .Values.api.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "transcript-create.fullname" . }}-api
  labels:
    {{- include "transcript-create.api.labels" . | nindent 4 }}
spec:
  {{- if not .Values.api.autoscaling.enabled }}
  replicas: {{ .Values.api.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "transcript-create.api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "transcript-create.api.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "transcript-create.imagePullSecrets" . | nindent 6 }}
      securityContext:
        {{- include "transcript-create.podSecurityContext" . | nindent 8 }}
      containers:
      - name: api
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.existingSecret | default (printf "%s-secrets" (include "transcript-create.fullname" .)) }}
              key: database-url
        - name: REDIS_URL
          value: {{ include "transcript-create.redisUrl" . | quote }}
        - name: OPENSEARCH_URL
          value: {{ include "transcript-create.opensearchUrl" . | quote }}
        - name: WHISPER_MODEL
          value: {{ .Values.config.whisper.model | quote }}
        - name: WHISPER_BACKEND
          value: {{ .Values.config.whisper.backend | quote }}
        - name: SEARCH_BACKEND
          value: {{ .Values.config.search.backend | quote }}
        - name: FRONTEND_ORIGIN
          value: "https://{{ .Values.global.domain }}"
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.existingSecret | default (printf "%s-secrets" (include "transcript-create.fullname" .)) }}
              key: session-secret
        - name: HF_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.existingSecret | default (printf "%s-secrets" (include "transcript-create.fullname" .)) }}
              key: hf-token
              optional: true
        - name: LOG_LEVEL
          value: {{ .Values.config.logging.level | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.config.logging.format | quote }}
        - name: ENVIRONMENT
          value: {{ .Values.global.environment | quote }}
        - name: ENABLE_METRICS
          value: {{ .Values.config.monitoring.enabled | quote }}
        - name: WORKDIR
          value: "/data"
        - name: HF_HOME
          value: "/cache/hf"
        - name: HF_HUB_CACHE
          value: "/cache/hf/hub"
        - name: TRANSFORMERS_CACHE
          value: "/cache/hf/transformers"
        resources:
          {{- toYaml .Values.api.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /live
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        volumeMounts:
        - name: data
          mountPath: /data
        - name: cache
          mountPath: /cache
        securityContext:
          {{- include "transcript-create.securityContext" . | nindent 10 }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "transcript-create.fullname" . }}-data
      - name: cache
        persistentVolumeClaim:
          claimName: {{ include "transcript-create.fullname" . }}-cache
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
